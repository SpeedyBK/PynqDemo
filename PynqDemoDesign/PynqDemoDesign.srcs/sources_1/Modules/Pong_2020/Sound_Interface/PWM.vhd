----------------------------------------------------------------------------------
-- Company: Uni Kassel FG Digitaltechnik 
-- Engineer: Benjamin Lagershausen-Ke√üler
-- 
-- Create Date: 01.03.2018 17:25:36
-- Design Name: PWM Generator
-- Module Name: PWM_Modulator - Behavioral
-- Project Name: Pong - Soundinterface
-- Target Devices: Pynq 
-- Tool Versions: 
-- Description: This Module is part of the digital-to-analog-converter. It contains 2 subsection. 
--              The first one is a sample-and-hold element. Which takes a PCM(Puls Code Modulation)
--              -coded signal and saves it for one conversion-periode, so the signal is stable
--              during the conversion. Addionanly it adds an offset to the PCM-Signal to make 
--              sure the PCM-Signal is always positive since we use an unipolar DAC.
--              The second subsection is basicly a comperator. Which generates a ramp-signal by 
--              counting up. And than compares the ramp-signal to the stable PCM-signal. If the
--              Value of the PCM-signal is bigger than the ramp-signal the PWM-Output is set to '1'
--              otherwise it is set to '0'.
--              By this comperation we get wider pulses if the PCM-Signal has higher values, and we 
--              get smaller Pulses if the PCM-Signal lower values. 
--              The final conversion to an analog signal is then done outside the FPGA by low-pass-
--              filtering the PWM-Output. Which mathematicly is an integration of the PWM-Signal.  
--              Aud_en_o has to be '1' to activate and '0' to deactivate the external Low-Pass-
--              Filter. 
-- 
--
-- Dependencies: 
-- 
-- Revision:
-- Revision 08/2020 1.00 - Initial Version BLK
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity PWM_Modulator is
    Port ( clk_i : in STD_LOGIC;
           reset_i : in STD_LOGIC;
           ampl_i : in STD_LOGIC_VECTOR (10 downto 0);
           PWM_o : out STD_LOGIC;
           aud_en_o : out STD_LOGIC);
end PWM_Modulator;

architecture Behavioral of PWM_Modulator is

signal ampl_sample : integer range 0 to 2047;
signal clear : std_logic;

begin

-----------------------------------------------------------------------------------
-- Sample and Hold
-----------------------------------------------------------------------------------
Sample_and_hold:process (clk_i, clear, reset_i)
begin
    if (reset_i = '1') then
        ampl_sample <= 0;
    elsif rising_edge(clk_i) then
        if (clear = '1') then
            ampl_sample <= to_integer(signed(ampl_i) + 1024);
        else 
            ampl_sample <= ampl_sample;
        end if;
    end if;
end process;

----------------------------------------------------------------------------------------
-- Generating PWM Signal: We compare a ramp signal, which is generated by a counter with
-- the inputsignal. 
----------------------------------------------------------------------------------------
PWMGenerator: process(clk_i, reset_i, ampl_sample)
variable count : integer range 0 to 2047;
begin
    if (reset_i = '1') then
        aud_en_o <= '0';
        PWM_o <= '0';
        clear <= '1';
        count := 0;
    elsif rising_edge (clk_i) then
        aud_en_o <= '1';
        if (count < 2047) then 
            count := count + 1;
            clear <= '0';
            if (count <= ampl_sample) then 
                PWM_o <= '1';
            else 
                PWM_o <= '0';
            end if;
        else 
            count := 0;
            clear <= '1'; 
        end if;
    end if;
end process;

end Behavioral;