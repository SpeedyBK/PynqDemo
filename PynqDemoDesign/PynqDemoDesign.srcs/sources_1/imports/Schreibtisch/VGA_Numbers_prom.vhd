----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04.04.2016 19:42:14
-- Design Name: 
-- Module Name: VGA_Numbers_prom - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity VGA_Numbers_prom is
    Port ( rom_address_i : in STD_LOGIC_VECTOR (3 downto 0);
           select_i : in std_logic_vector (3 downto 0);
           Out_o : out STD_LOGIC_VECTOR (15 downto 0));
end VGA_Numbers_prom;

architecture Behavioral of VGA_Numbers_prom is

---------------------------------------------------------------------------
-- Numbers saved in arrays:
---------------------------------------------------------------------------

type numbers is array (NATURAL range <>) of std_logic_vector (0 to 15);

constant one: numbers := (
"0000000000000000",
"0000000011110000",
"0000001111110000",
"0000111111110000",
"0011110011110000",
"0111000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000",
"0000000011110000");


constant two: numbers := (
"0000000000000000", -- 0
"0000011111100000", -- 1
"0001111111111000", -- 2
"0001111111111000", -- 3
"0111100000011110", -- 4
"0110000000001110", -- 5
"0110000000001110", -- 6
"0000000000011110", -- 7
"0000000000111100", -- 8
"0000000011110000", -- 9
"0000001111000000", -- 10
"0000111100000000", -- 11
"0011110000000000", -- 12
"0111111111111110", -- 13
"0111111111111110", -- 14
"0111111111111110"); -- 15

constant three: numbers := (
"0000000000000000",
"0000001110000000",
"0001111111100000",
"0011110001111000",
"0111100000011110",
"0000000000011110",
"0000000001111000",
"0000000111100000",
"0000000111100000",
"0000000001111000",
"0000000000011110",
"0111100000011110",
"0011110001111000",
"0001111111100000",
"0001111111100000",
"0000001110000000");

constant four: numbers := (
"0000000000000000",
"0000000000111100",
"0000000001111100",
"0000000111011100",
"0000001110011100",
"0000011100011100",
"0000111000011100",
"0001110000011100",
"0011100000011100",
"0111000000011100",
"0111111111111110",
"0111111111111110",
"0111111111111110",
"0000000000111000",
"0000000000111000",
"0000000000111000");

constant five: numbers := (
"0000000000000000",
"0111111111111110",
"0111111111111110",
"0111111111111110",
"0111000000000000",
"0111000000000000",
"0111111110000000",
"0111111111100000",
"0111111111111000",
"0000000011111110",
"0000000000001110",
"0000000000001110",
"0000000011111000",
"0111111111100000",
"0111111111100000",
"0000111100000000");

constant six: numbers := (
"0000000000000000",
"0000000000001110",
"0000000000111000",
"0000000011100000",
"0000001110000000",
"0000011100000000",
"0000111000000000",
"0001110000000000",
"0011101111100000",
"0111111111111000",
"0111111100111000",
"0111111000011100",
"0011100000001110",
"0001111000011100",
"0000111111111000",
"0000001111100000");

constant seven: numbers := (
"0000000000000000",
"0111111111111110",
"0111111111111110",
"0111111111111110",
"0000000000011100",
"0000000000111000",
"0000000001110000",
"0000000011100000",
"0000000111000000",
"0000001110000000",
"0000011100000000",
"0000111000000000",
"0001110000000000",
"0011100000000000",
"0111000000000000",
"0111000000000000");

constant eight: numbers := (
"0000000000000000",
"0000011111100000",
"0001111111111000",
"0011111111111100",
"0111100000011110",
"0111000000001110",
"0111100000011110",
"0001111111111000",
"0001111111111000",
"0011111111111100",
"0111100000111110",
"0111000000001110",
"0111100000011110",
"0011111111111100",
"0001111111111000",
"0000011111100000");

constant nine: numbers := (
"0000000000000000",
"0000011111100000",
"0001111111111000",
"0111110000111110",
"0111000000001110",
"0111000000001110",
"0011110000111110",
"0001111111111110",
"0000111111111110",
"0000011111001110",
"0000000000001110",
"0000000000001110",
"0000000000011110",
"0111111111111100",
"0111111111111000",
"0001111111100000");

constant zero: numbers := (
"0000000000000000",
"0000011111100000",
"0000111111110000",
"0011111111111100",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0111100000011110",
"0011111111111100",
"0000111111110000",
"0000011111100000");

begin

-----------------------------------------------------------------------
-- Decoder
-----------------------------------------------------------------------

-- Taking the right number, depending on select_i and the right line 
-- depending on rom_address_i.

decoder:process (select_i, rom_address_i)
    variable j: integer range 0 to 16;
    begin 
        j := to_integer(unsigned(rom_address_i));
        case select_i is 
            when "0000" =>
                Out_o <= zero(j);
            when "0001" =>
                Out_o <= one(j);
            when "0010" =>
                Out_o <= two(j);
            when "0011" =>
                Out_o <= three(j);
            when "0100" => 
                Out_o <= four(j);
            when "0101" =>
                Out_o <= five(j);
            when "0110" =>
                Out_o <= six(j);
            when "0111" =>
                Out_o <= seven(j);
            when "1000" =>
                Out_o <= eight(j);
            when "1001" => 
                Out_o <= nine(j);
            when others =>
                Out_o <= "0000000000000000";
        end case;
end process;

end Behavioral;
