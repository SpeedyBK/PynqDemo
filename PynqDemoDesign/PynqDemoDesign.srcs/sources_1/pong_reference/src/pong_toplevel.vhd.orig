--------------------------------------------------------------------------------
-- Title          : Pong Toplevel
-- Filename       : toplevel_pong.vhd
-- Project        : 6. Übungsblatt VHDL-Kurs (Pong-Spiel)
--------------------------------------------------------------------------------
-- Author         : Michael Kunz
-- Company        : Universität Kassel, FG Digitaltechnik
-- Date           : 21.06.2010
-- Language       : VHDL93
-- Synthesis      : No
-- Target Family  : ALL
-- Test Status    : !!! not released !!!
--------------------------------------------------------------------------------
-- Applicable Documents:
-- 
--
--------------------------------------------------------------------------------
-- Revision History:
-- Date        Version  Author   Description
-- 21.06.2010  1.0      MK       Created
--------------------------------------------------------------------------------
-- Description:
--
-- Dieses Modul stellt die Toplevel-Domäne für das Pong-Spiel dar, welches
-- von den Studierenden des VHDL-Kurses entwickelt werden soll. 
--
-- Es verbindet das Visualisierungsmodul mit dem Modul zur Ballbewegung und
-- Kollisionserkennung. Die fehlenden Eingaben der Module zur Schlägerbewegung
-- werden hier exemplarisch (testweise) gesetzt.

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.all;
use IEEE.STD_LOGIC_ARITH.all;
 
ENTITY pong_top IS
    generic(
      game_enable_clocks: integer := 840000
      );
    Port ( clock 							: in   std_logic;
           reset 							: in   std_logic;
			  
			  -- Controller Interface
			  rot_enc1_i 					: in  std_logic_vector(1 downto 0);
			  push_button1_i 				: in std_logic;
		     rot_enc2_i 					: in  std_logic_vector(1 downto 0);
			  push_button2_i 				: in std_logic;
			  
           -- Sound Interface
			  dac_o							: out  std_logic_vector (7 downto 0);
			  
			  -- Seven Segment Display
			  nseven_seg_leds_o 			: out std_logic_vector(6 downto 0);
			  nseven_seg_sel_o 			: out std_logic_vector(5 downto 0);

			  
			  -- VGA Controller
			  h_sync_o, v_sync_o 		: out  std_logic;
           red_o, green_o, blue_o	: out  std_logic_vector (2 downto 0));

END pong_top;
 
ARCHITECTURE behavior OF pong_top IS 

	COMPONENT clock_enable
    generic(
      game_enable_clocks: integer
      );
	  
	PORT(
			clock 	: in   std_logic;
         reset 			: in   std_logic;
         vga_enable_o 	: out  std_logic;
         game_enable_o	: out  std_logic;
			led_enable_o	: out  std_logic;
			note_enable_o	: out  std_logic;
			dds_enable_o	: out  std_logic
		  );
   END COMPONENT;
	
   component controller_interface
   generic(
 	  clk_frequency_in_Hz : integer;
	  racket_steps : integer;
	  debounce_time_in_us : integer;
	  racket_height : integer;
	  screen_height : integer
	  );
	port(
		rst_i	:	in std_logic;
		clk_i	:	in std_logic;	
		rot_enc_i : in  std_logic_vector(1 downto 0);
		push_but_i : in std_logic;
		push_but_deb_o : out  std_logic;
		racket_y_pos_o : out  std_logic_vector(9 downto 0)
	);
	end component;

	COMPONENT collision_detection
	GENERIC (ball_length				: integer := 6;
			   racket_length			: integer := 10;
			   racket_height			: integer := 30;
				racket_left_space		: integer := 20;
				racket_right_space	: integer := 620;
				screen_height			: integer := 480
				);
	PORT(
			clock 				: in   std_logic;
         reset 				: in   std_logic;
         racket_y_pos1_i	: in   std_logic_vector (9 downto 0);
			racket_y_pos2_i 	: in   std_logic_vector (9 downto 0);
         ball_x_i 			: in   std_logic_vector (9 downto 0);
			ball_y_i				: in   std_logic_vector (9 downto 0);
         hit_wall_o 			: out  std_logic_vector (2 downto 0);
         hit_racket_l_o		: out  std_logic_vector (1 downto 0);
			hit_racket_r_o 	: out  std_logic_vector (1 downto 0)
		  );
   END COMPONENT;

 
	COMPONENT ball_motion
	GENERIC (ball_length				: integer := 6;
			   racket_length			: integer := 10;
			   racket_height			: integer := 30;
				racket_left_space		: integer := 20;
				racket_right_space	: integer := 620;
				screen_height			: integer := 480;
				speedup_racket			: integer := 10
				);
--	PORT(
--			clock			 		: in   std_logic;
--         reset 				: in   std_logic;
--			game_enable_i		: in 	 std_logic;
--			push_but_deb1_i	: in	 std_logic;
--			push_but_deb2_i 	: in	 std_logic;
--			game_over_i			: in	 std_logic;
--         hit_wall_i 			: in   std_logic_vector (2 downto 0);
--         hit_racket_l_i		: in   std_logic_vector (1 downto 0);
--			hit_racket_r_i 	: in   std_logic_vector (1 downto 0);
--         ball_x_o 			: out  std_logic_vector (9 downto 0);
--			ball_y_o 			: out  std_logic_vector (9 downto 0)
--		  );
	PORT(
			clock_i			 		: in   std_logic;
         reset_i 				: in   std_logic;
			game_enable_i		: in 	 std_logic;
			push_but1_deb_i	: in	 std_logic;
			push_but2_deb_i 	: in	 std_logic;
			game_over_i			: in	 std_logic;
         hit_wall_i 			: in   std_logic_vector (2 downto 0);
         hit_racket_l_i		: in   std_logic_vector (1 downto 0);
			hit_racket_r_i 	: in   std_logic_vector (1 downto 0);
         ball_x_o 			: out  std_logic_vector (9 downto 0);
			ball_y_o 			: out  std_logic_vector (9 downto 0)
		  );


   END COMPONENT;

 
    COMPONENT vga_controller
	 Generic (ball_length			: integer := 6;
				 racket_length			: integer := 10;
				 racket_height			: integer := 30;
				 racket_left_space	: integer := 20;
				 racket_right_space	: integer := 620;
				 H_max					: integer := 799;
				 V_max					: integer := 524
				 );
    PORT(
         clk_i			 	: in   std_logic;
         rst_i 			: in   std_logic;
			vga_enable_i	: in	 std_logic;
         racket_y_pos1_i 	: in   std_logic_vector(9 downto 0);
         racket_y_pos2_i 	: in   std_logic_vector(9 downto 0);
         ball_x_i 		: in   std_logic_vector(9 downto 0);
         ball_y_i 		: in   std_logic_vector(9 downto 0);
         h_sync_o 			: out  std_logic;
         v_sync_o 			: out  std_logic;
         red_o 			: out  std_logic_vector(2 downto 0);
         green_o 			: out  std_logic_vector(2 downto 0);
         blue_o 			: out  std_logic_vector(2 downto 0)
        );
    END COMPONENT;
	     
 	COMPONENT sound_interface
	PORT(
			clock 	: in   std_logic;
         reset 			: in   std_logic;
		   note_enable_i	: in	 std_logic;
		   dds_enable_i	: in 	 std_logic;
		   hit_wall_i 		: in   std_logic_vector (2 downto 0);
		   hit_racket_l_i	: in   std_logic_vector (1 downto 0);
			hit_racket_r_i : in   std_logic_vector (1 downto 0);
		   game_over_i		: in	 std_logic;
		   dac_o 			: out  std_logic_vector (7 downto 0)
		  );
   END COMPONENT;
	
  component score_display
  generic(
    score_max : integer range 0 to 99
  );
	port(
		rst	:	in std_logic;
		clk	:	in std_logic;	
		hit_wall_i : in std_logic_vector(2 downto 0);
		led_enable_i : in std_logic;
		push_but_deb1_i : in std_logic;
		push_but_deb2_i : in std_logic;
		seven_seg_leds_o : out std_logic_vector(6 downto 0);
		seven_seg_sel_o : out std_logic_vector(5 downto 0);
		game_over_o : out std_logic
	);
  end component;



   
   signal racket_y_pos1 : std_logic_vector(9 downto 0) := (others => '0');
   signal racket_y_pos2 : std_logic_vector(9 downto 0) := (others => '0');
   signal ball_x : std_logic_vector(9 downto 0) := (others => '0');
   signal ball_y : std_logic_vector(9 downto 0) := (others => '0');
	signal hit_wall : std_logic_vector(2 downto 0) := (others => '0');
	signal hit_racket_l : std_logic_vector(1 downto 0) := (others => '0');
	signal hit_racket_r : std_logic_vector(1 downto 0) := (others => '0');
	signal game_over	: std_logic;
	signal push_but_deb1, push_but_deb2 : std_logic;
	signal Npush_but_deb1, Npush_but_deb2 : std_logic;
   signal seven_seg_leds : std_logic_vector(6 downto 0);
   signal seven_seg_sel : std_logic_vector(5 downto 0);

	
	signal nreset : std_logic;
	signal game_enable : std_logic;
	signal vga_enable : std_logic;
	signal note_enable : std_logic;
	signal dds_enable : std_logic;
   signal led_enable : std_logic;

	
	
	
	--signal m : std_logic_vector();
 
BEGIN

	clk_enable: clock_enable 
	generic map(
	  game_enable_clocks => game_enable_clocks
	)
	PORT MAP (
			clock 	=> clock,
         reset 			=> nreset,
         vga_enable_o 	=> vga_enable,
         game_enable_o	=> game_enable,
			led_enable_o	=> led_enable,
			note_enable_o	=> note_enable,
			dds_enable_o	=> dds_enable
		  );
	
  controller_interface1 : controller_interface
  generic map(
    clk_frequency_in_Hz => 50E6,
    racket_steps => 10,
    debounce_time_in_us => 2000,
    racket_height => 60,
    screen_height => 480
  )
	port map(
		rst_i	=> nreset,
		clk_i	=> clock,	
		rot_enc_i => rot_enc1_i,
		push_but_i => push_button1_i,
		push_but_deb_o => push_but_deb1,
		racket_y_pos_o => racket_y_pos1
	);
	
  controller_interface2 : controller_interface
  generic map(
    clk_frequency_in_Hz => 50E6,
    racket_steps => 10,
    debounce_time_in_us => 2000,
    racket_height => 60,
    screen_height => 480
  )
	port map(
		rst_i	=> nreset,
		clk_i	=> clock,	
		rot_enc_i => rot_enc2_i,
		push_but_i => push_button2_i,
		push_but_deb_o => push_but_deb2,
		racket_y_pos_o => racket_y_pos2
	);


	collision: collision_detection GENERIC MAP(
			ball_length				=> 6,
			racket_length			=> 10,
			racket_height			=> 60,
			racket_left_space		=> 20,
			racket_right_space 	=> 620,
			screen_height 			=> 480
			)
	
	PORT MAP (
			clock			 	=> clock,
         reset 			=> nreset,
			--game_enable_i	=> game_enable,
         racket_y_pos1_i 	=> racket_y_pos1,
			racket_y_pos2_i 	=> racket_y_pos2,
         ball_x_i 		=> ball_x,
			ball_y_i 		=> ball_y,
         hit_wall_o 		=> hit_wall,
         hit_racket_l_o	=> hit_racket_l,
			hit_racket_r_o => hit_racket_r
		  );


	motion: ball_motion GENERIC MAP(
			ball_length				=> 6,
			racket_length			=> 10,
			racket_height			=> 30,
			racket_left_space		=> 20,
			racket_right_space 	=> 620,
			screen_height 			=> 480,
			speedup_racket			=> 10
			)
	
--	PORT MAP (
--			clock 	=> clock,
--         reset 			=> nreset,
--			game_enable_i	=> game_enable,
--			push_but_deb1_i	=>	Npush_but_deb1,
--			push_but_deb2_i 	=>	Npush_but_deb2,
--			game_over_i			=>	game_over,
--         hit_wall_i 		=> hit_wall,
--         hit_racket_l_i	=> hit_racket_l,
--			hit_racket_r_i => hit_racket_r,
--         ball_x_o 		=> ball_x,
--			ball_y_o 		=> ball_y
--		  );

	PORT MAP (
			clock_i 	=> clock,
         reset_i 			=> nreset,
			game_enable_i	=> game_enable,
			push_but1_deb_i	=>	Npush_but_deb1,
			push_but2_deb_i 	=>	Npush_but_deb2,
			game_over_i			=>	game_over,
         hit_wall_i 		=> hit_wall,
         hit_racket_l_i	=> hit_racket_l,
			hit_racket_r_i => hit_racket_r,
         ball_x_o 		=> ball_x,
			ball_y_o 		=> ball_y
		  );
	
	--ball_x <= "0000100000";
	--ball_y <= "0000100000";
 
   visualization: vga_controller GENERIC MAP(
			ball_length				=>  6,
			racket_length			=>  10,
			racket_height			=>  60,
			racket_left_space		=>  20,
			racket_right_space	=>  620,
			H_max						=>  799,
			V_max						=>  524
				 )
	
	PORT MAP (
          clk_i 	=> clock,
          rst_i 			=> nreset,
			 vga_enable_i 	=> vga_enable,
          racket_y_pos1_i 	=> racket_y_pos1,
          racket_y_pos2_i 	=> racket_y_pos2,
          ball_x_i 		=> ball_x,
          ball_y_i 		=> ball_y,
          h_sync_o 		=> h_sync_o,
          v_sync_o 		=> v_sync_o,
          red_o 			=> red_o,
          green_o 		=> green_o,
          blue_o 			=> blue_o
        );
		  
--	sound: sound_interface PORT MAP (
--			clock 	=> clock,
--			reset 			=> nreset,
--		   note_enable_i	=> note_enable,
--		   dds_enable_i	=> dds_enable,
--         hit_wall_i 		=> hit_wall,
--         hit_racket_l_i	=> hit_racket_l,
--			hit_racket_r_i => hit_racket_r,
--		   game_over_i		=> game_over,
--		   dac_o 			=> dac_o
--		  );

	dac_o <= (others => '0');
  score_display_inst : score_display
  generic map(
    score_max => 15
  )
  port map(
		rst	=> nreset,
		clk	=> clock,
		hit_wall_i => hit_wall,
		led_enable_i => led_enable,
		push_but_deb1_i => Npush_but_deb1,
		push_but_deb2_i => Npush_but_deb2,
		seven_seg_leds_o => seven_seg_leds,
		seven_seg_sel_o => seven_seg_sel,
		game_over_o => game_over
	);
	
	--game_over <= '0';
	
	nseven_seg_leds_o <= not seven_seg_leds;
	nseven_seg_sel_o <= not seven_seg_sel;


--	bar_y_pos1 <= CONV_STD_LOGIC_VECTOR(20,10);
--   bar_y_pos2 <= CONV_STD_LOGIC_VECTOR(300,10);
--	racket_y_pos1 <= ball_y-14;
--   racket_y_pos2 <= ball_y-14;
--	game_over <= '0';
--	push_but_deb1 <= not nSw(0);
--	push_but_deb2 <= not nSw(1);

	
	nreset <= not reset;
--	Npush_but_deb1 <= not push_but_deb1;
--	Npush_but_deb2 <= not push_but_deb2;
	Npush_but_deb1 <= push_but_deb1;
	Npush_but_deb2 <= push_but_deb2;

--   ball_x 	 <= CONV_STD_LOGIC_VECTOR(640,10);
--   ball_y 	 <= CONV_STD_LOGIC_VECTOR(480,10);

END;
